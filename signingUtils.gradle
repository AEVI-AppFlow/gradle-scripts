class Signing {

    private static resolveProperty(String name, Object target) {
        if (target.hasProperty(name)) {
            return target.property(name);
        } else if (System.getenv(name.toUpperCase())) {
            return System.getenv(name.toUpperCase());
        } else {
            return null;
        }
    }

    private static resolvePropertiesOrFail(Project project, List<String> names, Closure closure) {
        List<String> values = names.collect {resolveProperty(it, project) }
        int nullIndex = values.findLastIndexOf { it == null }
        if (nullIndex < 0) {
            return closure(*values)
        } else {
            throw new GradleException("Failed to resolve property: " + names[nullIndex])
        }
    }

    static config = { String name, String alias = "key" ->
        resolvePropertiesOrFail (project, ["${name}_keystore", "${name}_keystore_password"]) { String keystore, String pwd ->
            File keystoreFile = file("$delegate.rootProject.buildDir/${name}.jks")
            if (!keystoreFile.exists()) {
                keystoreFile << keystore.decodeBase64()
            }
            android.signingConfigs {
                "$name" {
                    storeFile keystoreFile
                    storePassword pwd
                    keyAlias alias
                    keyPassword pwd
                }
            }
            android.signingConfigs."$name"
        }
    }

    static albert = { -> Signing.config("albert_app", "application") }
    static albertPlatform = { -> Signing.config("albert_platform", "system_apps_platform_developer") }
    static aosp = { -> Signing.config("aosp_platform") }
    static sdkDev = { -> Signing.config("sdk_dev") }
}

Signing.config.delegate = this
project.extensions.create("signingUtils", Signing)