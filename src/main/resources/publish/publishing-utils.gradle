apply plugin: "maven-publish"
def propUtilsViaClassLoader = rootProject.buildscript.classLoader.getResource('publish/property-utils.gradle');
if (propUtilsViaClassLoader != null) {
    apply from: propUtilsViaClassLoader.toURI()
} else {
    apply from: new File(buildscript.sourceFile.parentFile, "property-utils.gradle")
}


class Publishing {

    private static String GITHUB_REPO = "github_repository"
    private static String GITHUB_ID = "github_actor"
    private static String GITHUB_SECRET = "github_token"

    static githubRepo(Project project, RepositoryHandler handler) {
        project.propertyUtils.resolve([GITHUB_REPO, GITHUB_ID, GITHUB_SECRET]) { repo, id, secret ->
            handler.maven {
                name = "github"
                url = "https://maven.pkg.github.com/$repo"
                credentials {
                    username = id
                    password = secret
                }
            }
        }
    }

    static Object androidVariants(Object android) {
        if (android.hasProperty("applicationVariants")) {
            return android.applicationVariants
        } else if (android.hasProperty("libraryVariants")) {
            return android.libraryVariants
        } else {
            return null
        }
    }

    // Starting from version 3.6.0 the Android gradle plugin exposes standard gradle components that can be used
    // for publication. This method could therefore potentially be used to also publish Android artifacts however APKs
    // publications are getting bundle into a zip file...
    static void componentPublications(PublicationContainer publications, SoftwareComponentContainer components, Closure override) {
        components.all { component ->
            publications.create(component.name, MavenPublication) {
                from component
                override.delegate = it
                override(component.name)
            }
        }
    }

    protected Project project

    Publishing(Project project) {
        this.project = project
    }

    void publication(Closure override) {
        project.publishing {
            githubRepo(this.project, repositories)
        }
    }

    void repos(RepositoryHandler handler) {
        awsRepos(project, handler)
    }
}

if (!project.extensions.findByName("publishingUtils")) {
    project.extensions.create("publishingUtils", Publishing, project)
}