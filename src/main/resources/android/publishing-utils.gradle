apply plugin: "maven-publish"
def propUtilsViaClassLoader = rootProject.buildscript.classLoader.getResource('android/property-utils.gradle');
if (propUtilsViaClassLoader != null) {
    apply from: propUtilsViaClassLoader.toURI()
} else {
    apply from: new File(buildscript.sourceFile.parentFile, "property-utils.gradle")
}


class Publishing {

    private static String AWS_ID = "aws_access_key_id"
    private static String AWS_SECRET = "aws_secret_access_key"
    private static Map<String, String> AWS_REPOS = [
            release : "s3://sdk-releases.aevi.com/maven2",
            qa      : "s3://sdk-qa.aevi.com/maven2",
            snapshot: "s3://sdk-snapshots.aevi.com/maven2"
    ]

    private static String GITHUB_REPO = "github_repository"
    private static String GITHUB_ID = "github_actor"
    private static String GITHUB_SECRET = "github_token"

    private static githubRepo(Project project, RepositoryHandler handler) {
        project.propertyUtils.resolve([GITHUB_REPO, GITHUB_ID, GITHUB_SECRET]) { repo, id, secret ->
            handler.maven {
                name = "github"
                url = "https://maven.pkg.github.com/$repo"
                credentials {
                    username = id
                    password = secret
                }
            }
        }
    }

    private static awsRepos(Project project, RepositoryHandler handler) {
        project.propertyUtils.resolve([AWS_ID, AWS_SECRET]) { access, secret ->
            AWS_REPOS.each { repoName, repoUrl ->
                handler.maven {
                    name repoName
                    url repoUrl
                    credentials(AwsCredentials) {
                        accessKey access
                        secretKey secret
                    }
                }
            }
        }
    }

    private static Object androidVariants(Object android) {
        if (android.hasProperty("applicationVariants")) {
            return android.applicationVariants
        } else if (android.hasProperty("libraryVariants")) {
            return android.libraryVariants
        } else {
            return null
        }
    }

    private static void androidPublications(PublicationContainer publications, Object android, Closure override, boolean isLibrary) {
        androidVariants(android).all { variant ->
            variant.outputs.each { output ->
                publications.create(variant.name, MavenPublication) {
                    artifact output.outputFile
                    override.delegate = it
                    override(variant.baseName)

                    // For aars, we need to list transitive deps in the pom
                    if (isLibrary) {
                        pom.withXml {
                            def root = asNode()
                            def dependenciesNode = root.appendNode('dependencies')

                            // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                            override.configurations.implementation.allDependencies.each {
                                // Ensure dependencies such as fileTree are not included in the pom.
                                if (it.name != 'unspecified') {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // Starting from version 3.6.0 the Android gradle plugin exposes standard gradle components that can be used
    // for publication. This method could therefore potentially be used to also publish Android artifacts however APKs
    // publications are getting bundle into a zip file...
    private static void componentPublications(PublicationContainer publications, SoftwareComponentContainer components, Closure override) {
        components.all { component ->
            publications.create(component.name, MavenPublication) {
                from component
                override.delegate = it
                override(component.name)
            }
        }
    }

    protected Project project

    Publishing(Project project) {
        this.project = project
    }

    void publication(Closure override) {
        project.publishing {
            githubRepo(this.project, repositories)
            awsRepos(this.project, repositories)

            this.project.afterEvaluate {
                if (this.project.hasProperty("android")) {
                    this.project.plugins.withId('com.android.application') {
                        androidPublications(publications, this.project["android"], override, false)
                    }
                    this.project.plugins.withId('com.android.library') {
                        androidPublications(publications, this.project["android"], override, true)
                    }
                } else {
                    componentPublications(publications, this.project.components, override)
                }
            }
        }
    }

    void repos(RepositoryHandler handler) {
        awsRepos(project, handler)
    }
}

if (!project.extensions.findByName("publishingUtils")) {
    project.extensions.create("publishingUtils", Publishing, project)
}