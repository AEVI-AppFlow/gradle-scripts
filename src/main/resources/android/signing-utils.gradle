apply from: rootProject.buildscript.classLoader.getResource('android/property-utils.gradle').toURI()

class Signing {

    private static String camelCase(String value) {
        value.split("[^a-zA-Z0-9]+").collect { it.capitalize() }.join()
    }

    private static registerKeystoreCreationTask(Project project, File buildDir, String name, String keystore) {
        File keystoreFile = new File("$buildDir/${name}.jks")
        String taskName = "create${camelCase(name)}Keystore"
        project.task(taskName) {
            doLast {
                if (!keystoreFile.exists()) {
                    keystoreFile.parentFile.mkdirs()
                    keystoreFile << keystore.decodeBase64()
                }
            }
        }
        project.tasks.preBuild.dependsOn taskName
        return keystoreFile
    }

    protected Project project

    Signing(Project project) {
        this.project = project
    }

    Object config(String name, String alias = "key") {
        return project.propertyUtils.resolve(["${name}_keystore", "${name}_keystore_password"]) { String keystore, String pwd ->
            if (!project.android.signingConfigs.hasProperty(name)) {
                project.android.signingConfigs {
                    "$name" {
                        storeFile registerKeystoreCreationTask(project, project.rootProject.buildDir, name, keystore)
                        storePassword pwd
                        keyAlias alias
                        keyPassword pwd
                    }
                }
            }
            project.android.signingConfigs."$name"
        }
    }

    Object getAlbert() { return config("albert_app", "application") }

    Object getAlbertPlatform() { return config("albert_platform", "system_apps_platform_developer") }

    Object getAosp() { return config("aosp_platform") }

    Object getSdkDev() { return config("sdk_dev") }
}

if (!project.extensions.findByName("signingUtils")) {
    project.extensions.create("signingUtils", Signing, project)
}
